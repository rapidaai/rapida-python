# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import rapida.clients.protos.integration_api_pb2 as integration__api__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in integration_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BedrockServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Embedding = channel.unary_unary(
                '/integration_api.BedrockService/Embedding',
                request_serializer=integration__api__pb2.EmbeddingRequest.SerializeToString,
                response_deserializer=integration__api__pb2.EmbeddingResponse.FromString,
                _registered_method=True)
        self.Chat = channel.unary_unary(
                '/integration_api.BedrockService/Chat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.BedrockService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)


class BedrockServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Embedding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BedrockServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Embedding': grpc.unary_unary_rpc_method_handler(
                    servicer.Embedding,
                    request_deserializer=integration__api__pb2.EmbeddingRequest.FromString,
                    response_serializer=integration__api__pb2.EmbeddingResponse.SerializeToString,
            ),
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.BedrockService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.BedrockService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BedrockService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Embedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.BedrockService/Embedding',
            integration__api__pb2.EmbeddingRequest.SerializeToString,
            integration__api__pb2.EmbeddingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.BedrockService/Chat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.BedrockService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OpenAiServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Embedding = channel.unary_unary(
                '/integration_api.OpenAiService/Embedding',
                request_serializer=integration__api__pb2.EmbeddingRequest.SerializeToString,
                response_deserializer=integration__api__pb2.EmbeddingResponse.FromString,
                _registered_method=True)
        self.Chat = channel.unary_unary(
                '/integration_api.OpenAiService/Chat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.StreamChat = channel.unary_stream(
                '/integration_api.OpenAiService/StreamChat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.OpenAiService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)
        self.GetModeration = channel.unary_unary(
                '/integration_api.OpenAiService/GetModeration',
                request_serializer=integration__api__pb2.GetModerationRequest.SerializeToString,
                response_deserializer=integration__api__pb2.GetModerationResponse.FromString,
                _registered_method=True)


class OpenAiServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Embedding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModeration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OpenAiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Embedding': grpc.unary_unary_rpc_method_handler(
                    servicer.Embedding,
                    request_deserializer=integration__api__pb2.EmbeddingRequest.FromString,
                    response_serializer=integration__api__pb2.EmbeddingResponse.SerializeToString,
            ),
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'StreamChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
            'GetModeration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModeration,
                    request_deserializer=integration__api__pb2.GetModerationRequest.FromString,
                    response_serializer=integration__api__pb2.GetModerationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.OpenAiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.OpenAiService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OpenAiService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Embedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.OpenAiService/Embedding',
            integration__api__pb2.EmbeddingRequest.SerializeToString,
            integration__api__pb2.EmbeddingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.OpenAiService/Chat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/integration_api.OpenAiService/StreamChat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.OpenAiService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModeration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.OpenAiService/GetModeration',
            integration__api__pb2.GetModerationRequest.SerializeToString,
            integration__api__pb2.GetModerationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AzureServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Embedding = channel.unary_unary(
                '/integration_api.AzureService/Embedding',
                request_serializer=integration__api__pb2.EmbeddingRequest.SerializeToString,
                response_deserializer=integration__api__pb2.EmbeddingResponse.FromString,
                _registered_method=True)
        self.Chat = channel.unary_unary(
                '/integration_api.AzureService/Chat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.StreamChat = channel.unary_stream(
                '/integration_api.AzureService/StreamChat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.AzureService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)
        self.GetModeration = channel.unary_unary(
                '/integration_api.AzureService/GetModeration',
                request_serializer=integration__api__pb2.GetModerationRequest.SerializeToString,
                response_deserializer=integration__api__pb2.GetModerationResponse.FromString,
                _registered_method=True)


class AzureServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Embedding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModeration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AzureServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Embedding': grpc.unary_unary_rpc_method_handler(
                    servicer.Embedding,
                    request_deserializer=integration__api__pb2.EmbeddingRequest.FromString,
                    response_serializer=integration__api__pb2.EmbeddingResponse.SerializeToString,
            ),
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'StreamChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
            'GetModeration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModeration,
                    request_deserializer=integration__api__pb2.GetModerationRequest.FromString,
                    response_serializer=integration__api__pb2.GetModerationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.AzureService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.AzureService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AzureService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Embedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.AzureService/Embedding',
            integration__api__pb2.EmbeddingRequest.SerializeToString,
            integration__api__pb2.EmbeddingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.AzureService/Chat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/integration_api.AzureService/StreamChat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.AzureService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModeration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.AzureService/GetModeration',
            integration__api__pb2.GetModerationRequest.SerializeToString,
            integration__api__pb2.GetModerationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class GoogleServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Embedding = channel.unary_unary(
                '/integration_api.GoogleService/Embedding',
                request_serializer=integration__api__pb2.EmbeddingRequest.SerializeToString,
                response_deserializer=integration__api__pb2.EmbeddingResponse.FromString,
                _registered_method=True)
        self.Chat = channel.unary_unary(
                '/integration_api.GoogleService/Chat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.StreamChat = channel.unary_stream(
                '/integration_api.GoogleService/StreamChat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.GoogleService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)


class GoogleServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Embedding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GoogleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Embedding': grpc.unary_unary_rpc_method_handler(
                    servicer.Embedding,
                    request_deserializer=integration__api__pb2.EmbeddingRequest.FromString,
                    response_serializer=integration__api__pb2.EmbeddingResponse.SerializeToString,
            ),
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'StreamChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.GoogleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.GoogleService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GoogleService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Embedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.GoogleService/Embedding',
            integration__api__pb2.EmbeddingRequest.SerializeToString,
            integration__api__pb2.EmbeddingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.GoogleService/Chat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/integration_api.GoogleService/StreamChat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.GoogleService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ReplicateServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Chat = channel.unary_unary(
                '/integration_api.ReplicateService/Chat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.StreamChat = channel.unary_stream(
                '/integration_api.ReplicateService/StreamChat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.ReplicateService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)


class ReplicateServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'StreamChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.ReplicateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.ReplicateService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ReplicateService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.ReplicateService/Chat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/integration_api.ReplicateService/StreamChat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.ReplicateService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AnthropicServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Chat = channel.unary_unary(
                '/integration_api.AnthropicService/Chat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.StreamChat = channel.unary_stream(
                '/integration_api.AnthropicService/StreamChat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.AnthropicService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)


class AnthropicServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnthropicServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'StreamChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.AnthropicService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.AnthropicService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AnthropicService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.AnthropicService/Chat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/integration_api.AnthropicService/StreamChat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.AnthropicService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CohereServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Embedding = channel.unary_unary(
                '/integration_api.CohereService/Embedding',
                request_serializer=integration__api__pb2.EmbeddingRequest.SerializeToString,
                response_deserializer=integration__api__pb2.EmbeddingResponse.FromString,
                _registered_method=True)
        self.Reranking = channel.unary_unary(
                '/integration_api.CohereService/Reranking',
                request_serializer=integration__api__pb2.RerankingRequest.SerializeToString,
                response_deserializer=integration__api__pb2.RerankingResponse.FromString,
                _registered_method=True)
        self.Chat = channel.unary_unary(
                '/integration_api.CohereService/Chat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.StreamChat = channel.unary_stream(
                '/integration_api.CohereService/StreamChat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.CohereService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)


class CohereServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Embedding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reranking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CohereServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Embedding': grpc.unary_unary_rpc_method_handler(
                    servicer.Embedding,
                    request_deserializer=integration__api__pb2.EmbeddingRequest.FromString,
                    response_serializer=integration__api__pb2.EmbeddingResponse.SerializeToString,
            ),
            'Reranking': grpc.unary_unary_rpc_method_handler(
                    servicer.Reranking,
                    request_deserializer=integration__api__pb2.RerankingRequest.FromString,
                    response_serializer=integration__api__pb2.RerankingResponse.SerializeToString,
            ),
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'StreamChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.CohereService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.CohereService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CohereService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Embedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.CohereService/Embedding',
            integration__api__pb2.EmbeddingRequest.SerializeToString,
            integration__api__pb2.EmbeddingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Reranking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.CohereService/Reranking',
            integration__api__pb2.RerankingRequest.SerializeToString,
            integration__api__pb2.RerankingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.CohereService/Chat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/integration_api.CohereService/StreamChat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.CohereService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HuggingfaceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Chat = channel.unary_unary(
                '/integration_api.HuggingfaceService/Chat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.HuggingfaceService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)


class HuggingfaceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HuggingfaceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.HuggingfaceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.HuggingfaceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HuggingfaceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.HuggingfaceService/Chat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.HuggingfaceService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MistralServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Chat = channel.unary_unary(
                '/integration_api.MistralService/Chat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.StreamChat = channel.unary_stream(
                '/integration_api.MistralService/StreamChat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.MistralService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)


class MistralServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MistralServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'StreamChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.MistralService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.MistralService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MistralService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.MistralService/Chat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/integration_api.MistralService/StreamChat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.MistralService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StabilityAiServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.StabilityAiService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)


class StabilityAiServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StabilityAiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.StabilityAiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.StabilityAiService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StabilityAiService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.StabilityAiService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TogetherAiServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Chat = channel.unary_unary(
                '/integration_api.TogetherAiService/Chat',
                request_serializer=integration__api__pb2.ChatRequest.SerializeToString,
                response_deserializer=integration__api__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.TogetherAiService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)


class TogetherAiServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TogetherAiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=integration__api__pb2.ChatRequest.FromString,
                    response_serializer=integration__api__pb2.ChatResponse.SerializeToString,
            ),
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.TogetherAiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.TogetherAiService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TogetherAiService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.TogetherAiService/Chat',
            integration__api__pb2.ChatRequest.SerializeToString,
            integration__api__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.TogetherAiService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DeepInfraServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.DeepInfraService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)


class DeepInfraServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeepInfraServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.DeepInfraService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.DeepInfraService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DeepInfraService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.DeepInfraService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class VoyageAiServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Embedding = channel.unary_unary(
                '/integration_api.VoyageAiService/Embedding',
                request_serializer=integration__api__pb2.EmbeddingRequest.SerializeToString,
                response_deserializer=integration__api__pb2.EmbeddingResponse.FromString,
                _registered_method=True)
        self.Reranking = channel.unary_unary(
                '/integration_api.VoyageAiService/Reranking',
                request_serializer=integration__api__pb2.RerankingRequest.SerializeToString,
                response_deserializer=integration__api__pb2.RerankingResponse.FromString,
                _registered_method=True)
        self.VerifyCredential = channel.unary_unary(
                '/integration_api.VoyageAiService/VerifyCredential',
                request_serializer=integration__api__pb2.VerifyCredentialRequest.SerializeToString,
                response_deserializer=integration__api__pb2.VerifyCredentialResponse.FromString,
                _registered_method=True)


class VoyageAiServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Embedding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reranking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VoyageAiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Embedding': grpc.unary_unary_rpc_method_handler(
                    servicer.Embedding,
                    request_deserializer=integration__api__pb2.EmbeddingRequest.FromString,
                    response_serializer=integration__api__pb2.EmbeddingResponse.SerializeToString,
            ),
            'Reranking': grpc.unary_unary_rpc_method_handler(
                    servicer.Reranking,
                    request_deserializer=integration__api__pb2.RerankingRequest.FromString,
                    response_serializer=integration__api__pb2.RerankingResponse.SerializeToString,
            ),
            'VerifyCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCredential,
                    request_deserializer=integration__api__pb2.VerifyCredentialRequest.FromString,
                    response_serializer=integration__api__pb2.VerifyCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'integration_api.VoyageAiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('integration_api.VoyageAiService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VoyageAiService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Embedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.VoyageAiService/Embedding',
            integration__api__pb2.EmbeddingRequest.SerializeToString,
            integration__api__pb2.EmbeddingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Reranking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.VoyageAiService/Reranking',
            integration__api__pb2.RerankingRequest.SerializeToString,
            integration__api__pb2.RerankingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/integration_api.VoyageAiService/VerifyCredential',
            integration__api__pb2.VerifyCredentialRequest.SerializeToString,
            integration__api__pb2.VerifyCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
