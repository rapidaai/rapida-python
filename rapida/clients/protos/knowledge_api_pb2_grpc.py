# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import rapida.clients.protos.common_pb2 as common__pb2
import rapida.clients.protos.knowledge_api_pb2 as knowledge__api__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in knowledge_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class KnowledgeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetKnowledge = channel.unary_unary(
                '/knowledge_api.KnowledgeService/GetKnowledge',
                request_serializer=knowledge__api__pb2.GetKnowledgeRequest.SerializeToString,
                response_deserializer=knowledge__api__pb2.GetKnowledgeResponse.FromString,
                _registered_method=True)
        self.GetAllKnowledge = channel.unary_unary(
                '/knowledge_api.KnowledgeService/GetAllKnowledge',
                request_serializer=knowledge__api__pb2.GetAllKnowledgeRequest.SerializeToString,
                response_deserializer=knowledge__api__pb2.GetAllKnowledgeResponse.FromString,
                _registered_method=True)
        self.CreateKnowledge = channel.unary_unary(
                '/knowledge_api.KnowledgeService/CreateKnowledge',
                request_serializer=knowledge__api__pb2.CreateKnowledgeRequest.SerializeToString,
                response_deserializer=knowledge__api__pb2.CreateKnowledgeResponse.FromString,
                _registered_method=True)
        self.CreateKnowledgeTag = channel.unary_unary(
                '/knowledge_api.KnowledgeService/CreateKnowledgeTag',
                request_serializer=knowledge__api__pb2.CreateKnowledgeTagRequest.SerializeToString,
                response_deserializer=knowledge__api__pb2.GetKnowledgeResponse.FromString,
                _registered_method=True)
        self.CreateKnowledgeDocument = channel.unary_unary(
                '/knowledge_api.KnowledgeService/CreateKnowledgeDocument',
                request_serializer=knowledge__api__pb2.CreateKnowledgeDocumentRequest.SerializeToString,
                response_deserializer=knowledge__api__pb2.CreateKnowledgeDocumentResponse.FromString,
                _registered_method=True)
        self.GetAllKnowledgeDocument = channel.unary_unary(
                '/knowledge_api.KnowledgeService/GetAllKnowledgeDocument',
                request_serializer=knowledge__api__pb2.GetAllKnowledgeDocumentRequest.SerializeToString,
                response_deserializer=knowledge__api__pb2.GetAllKnowledgeDocumentResponse.FromString,
                _registered_method=True)
        self.GetAllKnowledgeDocumentSegment = channel.unary_unary(
                '/knowledge_api.KnowledgeService/GetAllKnowledgeDocumentSegment',
                request_serializer=knowledge__api__pb2.GetAllKnowledgeDocumentSegmentRequest.SerializeToString,
                response_deserializer=knowledge__api__pb2.GetAllKnowledgeDocumentSegmentResponse.FromString,
                _registered_method=True)
        self.UpdateKnowledgeDetail = channel.unary_unary(
                '/knowledge_api.KnowledgeService/UpdateKnowledgeDetail',
                request_serializer=knowledge__api__pb2.UpdateKnowledgeDetailRequest.SerializeToString,
                response_deserializer=knowledge__api__pb2.GetKnowledgeResponse.FromString,
                _registered_method=True)
        self.UpdateKnowledgeDocumentSegment = channel.unary_unary(
                '/knowledge_api.KnowledgeService/UpdateKnowledgeDocumentSegment',
                request_serializer=knowledge__api__pb2.UpdateKnowledgeDocumentSegmentRequest.SerializeToString,
                response_deserializer=common__pb2.BaseResponse.FromString,
                _registered_method=True)
        self.DeleteKnowledgeDocumentSegment = channel.unary_unary(
                '/knowledge_api.KnowledgeService/DeleteKnowledgeDocumentSegment',
                request_serializer=knowledge__api__pb2.DeleteKnowledgeDocumentSegmentRequest.SerializeToString,
                response_deserializer=common__pb2.BaseResponse.FromString,
                _registered_method=True)
        self.GetAllKnowledgeLog = channel.unary_unary(
                '/knowledge_api.KnowledgeService/GetAllKnowledgeLog',
                request_serializer=knowledge__api__pb2.GetAllKnowledgeLogRequest.SerializeToString,
                response_deserializer=knowledge__api__pb2.GetAllKnowledgeLogResponse.FromString,
                _registered_method=True)
        self.GetKnowledgeLog = channel.unary_unary(
                '/knowledge_api.KnowledgeService/GetKnowledgeLog',
                request_serializer=knowledge__api__pb2.GetKnowledgeLogRequest.SerializeToString,
                response_deserializer=knowledge__api__pb2.GetKnowledgeLogResponse.FromString,
                _registered_method=True)


class KnowledgeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetKnowledge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllKnowledge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateKnowledge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateKnowledgeTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateKnowledgeDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllKnowledgeDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllKnowledgeDocumentSegment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateKnowledgeDetail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateKnowledgeDocumentSegment(self, request, context):
        """
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteKnowledgeDocumentSegment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllKnowledgeLog(self, request, context):
        """knowledge log retrieval log
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKnowledgeLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KnowledgeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetKnowledge': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKnowledge,
                    request_deserializer=knowledge__api__pb2.GetKnowledgeRequest.FromString,
                    response_serializer=knowledge__api__pb2.GetKnowledgeResponse.SerializeToString,
            ),
            'GetAllKnowledge': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllKnowledge,
                    request_deserializer=knowledge__api__pb2.GetAllKnowledgeRequest.FromString,
                    response_serializer=knowledge__api__pb2.GetAllKnowledgeResponse.SerializeToString,
            ),
            'CreateKnowledge': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKnowledge,
                    request_deserializer=knowledge__api__pb2.CreateKnowledgeRequest.FromString,
                    response_serializer=knowledge__api__pb2.CreateKnowledgeResponse.SerializeToString,
            ),
            'CreateKnowledgeTag': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKnowledgeTag,
                    request_deserializer=knowledge__api__pb2.CreateKnowledgeTagRequest.FromString,
                    response_serializer=knowledge__api__pb2.GetKnowledgeResponse.SerializeToString,
            ),
            'CreateKnowledgeDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKnowledgeDocument,
                    request_deserializer=knowledge__api__pb2.CreateKnowledgeDocumentRequest.FromString,
                    response_serializer=knowledge__api__pb2.CreateKnowledgeDocumentResponse.SerializeToString,
            ),
            'GetAllKnowledgeDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllKnowledgeDocument,
                    request_deserializer=knowledge__api__pb2.GetAllKnowledgeDocumentRequest.FromString,
                    response_serializer=knowledge__api__pb2.GetAllKnowledgeDocumentResponse.SerializeToString,
            ),
            'GetAllKnowledgeDocumentSegment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllKnowledgeDocumentSegment,
                    request_deserializer=knowledge__api__pb2.GetAllKnowledgeDocumentSegmentRequest.FromString,
                    response_serializer=knowledge__api__pb2.GetAllKnowledgeDocumentSegmentResponse.SerializeToString,
            ),
            'UpdateKnowledgeDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateKnowledgeDetail,
                    request_deserializer=knowledge__api__pb2.UpdateKnowledgeDetailRequest.FromString,
                    response_serializer=knowledge__api__pb2.GetKnowledgeResponse.SerializeToString,
            ),
            'UpdateKnowledgeDocumentSegment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateKnowledgeDocumentSegment,
                    request_deserializer=knowledge__api__pb2.UpdateKnowledgeDocumentSegmentRequest.FromString,
                    response_serializer=common__pb2.BaseResponse.SerializeToString,
            ),
            'DeleteKnowledgeDocumentSegment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteKnowledgeDocumentSegment,
                    request_deserializer=knowledge__api__pb2.DeleteKnowledgeDocumentSegmentRequest.FromString,
                    response_serializer=common__pb2.BaseResponse.SerializeToString,
            ),
            'GetAllKnowledgeLog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllKnowledgeLog,
                    request_deserializer=knowledge__api__pb2.GetAllKnowledgeLogRequest.FromString,
                    response_serializer=knowledge__api__pb2.GetAllKnowledgeLogResponse.SerializeToString,
            ),
            'GetKnowledgeLog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKnowledgeLog,
                    request_deserializer=knowledge__api__pb2.GetKnowledgeLogRequest.FromString,
                    response_serializer=knowledge__api__pb2.GetKnowledgeLogResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'knowledge_api.KnowledgeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('knowledge_api.KnowledgeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class KnowledgeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetKnowledge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_api.KnowledgeService/GetKnowledge',
            knowledge__api__pb2.GetKnowledgeRequest.SerializeToString,
            knowledge__api__pb2.GetKnowledgeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllKnowledge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_api.KnowledgeService/GetAllKnowledge',
            knowledge__api__pb2.GetAllKnowledgeRequest.SerializeToString,
            knowledge__api__pb2.GetAllKnowledgeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateKnowledge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_api.KnowledgeService/CreateKnowledge',
            knowledge__api__pb2.CreateKnowledgeRequest.SerializeToString,
            knowledge__api__pb2.CreateKnowledgeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateKnowledgeTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_api.KnowledgeService/CreateKnowledgeTag',
            knowledge__api__pb2.CreateKnowledgeTagRequest.SerializeToString,
            knowledge__api__pb2.GetKnowledgeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateKnowledgeDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_api.KnowledgeService/CreateKnowledgeDocument',
            knowledge__api__pb2.CreateKnowledgeDocumentRequest.SerializeToString,
            knowledge__api__pb2.CreateKnowledgeDocumentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllKnowledgeDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_api.KnowledgeService/GetAllKnowledgeDocument',
            knowledge__api__pb2.GetAllKnowledgeDocumentRequest.SerializeToString,
            knowledge__api__pb2.GetAllKnowledgeDocumentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllKnowledgeDocumentSegment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_api.KnowledgeService/GetAllKnowledgeDocumentSegment',
            knowledge__api__pb2.GetAllKnowledgeDocumentSegmentRequest.SerializeToString,
            knowledge__api__pb2.GetAllKnowledgeDocumentSegmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateKnowledgeDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_api.KnowledgeService/UpdateKnowledgeDetail',
            knowledge__api__pb2.UpdateKnowledgeDetailRequest.SerializeToString,
            knowledge__api__pb2.GetKnowledgeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateKnowledgeDocumentSegment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_api.KnowledgeService/UpdateKnowledgeDocumentSegment',
            knowledge__api__pb2.UpdateKnowledgeDocumentSegmentRequest.SerializeToString,
            common__pb2.BaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteKnowledgeDocumentSegment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_api.KnowledgeService/DeleteKnowledgeDocumentSegment',
            knowledge__api__pb2.DeleteKnowledgeDocumentSegmentRequest.SerializeToString,
            common__pb2.BaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllKnowledgeLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_api.KnowledgeService/GetAllKnowledgeLog',
            knowledge__api__pb2.GetAllKnowledgeLogRequest.SerializeToString,
            knowledge__api__pb2.GetAllKnowledgeLogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetKnowledgeLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_api.KnowledgeService/GetKnowledgeLog',
            knowledge__api__pb2.GetKnowledgeLogRequest.SerializeToString,
            knowledge__api__pb2.GetKnowledgeLogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
