# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import rapida.clients.protos.common_pb2 as common__pb2
import rapida.clients.protos.web_api_pb2 as web__api__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in web_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuthenticationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authenticate = channel.unary_unary(
                '/web_api.AuthenticationService/Authenticate',
                request_serializer=web__api__pb2.AuthenticateRequest.SerializeToString,
                response_deserializer=web__api__pb2.AuthenticateResponse.FromString,
                _registered_method=True)
        self.RegisterUser = channel.unary_unary(
                '/web_api.AuthenticationService/RegisterUser',
                request_serializer=web__api__pb2.RegisterUserRequest.SerializeToString,
                response_deserializer=web__api__pb2.AuthenticateResponse.FromString,
                _registered_method=True)
        self.Authorize = channel.unary_unary(
                '/web_api.AuthenticationService/Authorize',
                request_serializer=web__api__pb2.AuthorizeRequest.SerializeToString,
                response_deserializer=web__api__pb2.AuthenticateResponse.FromString,
                _registered_method=True)
        self.ScopeAuthorize = channel.unary_unary(
                '/web_api.AuthenticationService/ScopeAuthorize',
                request_serializer=web__api__pb2.ScopeAuthorizeRequest.SerializeToString,
                response_deserializer=web__api__pb2.ScopedAuthenticationResponse.FromString,
                _registered_method=True)
        self.VerifyToken = channel.unary_unary(
                '/web_api.AuthenticationService/VerifyToken',
                request_serializer=web__api__pb2.VerifyTokenRequest.SerializeToString,
                response_deserializer=web__api__pb2.VerifyTokenResponse.FromString,
                _registered_method=True)
        self.ForgotPassword = channel.unary_unary(
                '/web_api.AuthenticationService/ForgotPassword',
                request_serializer=web__api__pb2.ForgotPasswordRequest.SerializeToString,
                response_deserializer=web__api__pb2.ForgotPasswordResponse.FromString,
                _registered_method=True)
        self.CreatePassword = channel.unary_unary(
                '/web_api.AuthenticationService/CreatePassword',
                request_serializer=web__api__pb2.CreatePasswordRequest.SerializeToString,
                response_deserializer=web__api__pb2.CreatePasswordResponse.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/web_api.AuthenticationService/GetUser',
                request_serializer=web__api__pb2.GetUserRequest.SerializeToString,
                response_deserializer=web__api__pb2.GetUserResponse.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/web_api.AuthenticationService/UpdateUser',
                request_serializer=web__api__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=web__api__pb2.UpdateUserResponse.FromString,
                _registered_method=True)
        self.GetAllUser = channel.unary_unary(
                '/web_api.AuthenticationService/GetAllUser',
                request_serializer=web__api__pb2.GetAllUserRequest.SerializeToString,
                response_deserializer=web__api__pb2.GetAllUserResponse.FromString,
                _registered_method=True)
        self.Linkedin = channel.unary_unary(
                '/web_api.AuthenticationService/Linkedin',
                request_serializer=web__api__pb2.SocialAuthenticationRequest.SerializeToString,
                response_deserializer=web__api__pb2.AuthenticateResponse.FromString,
                _registered_method=True)
        self.Google = channel.unary_unary(
                '/web_api.AuthenticationService/Google',
                request_serializer=web__api__pb2.SocialAuthenticationRequest.SerializeToString,
                response_deserializer=web__api__pb2.AuthenticateResponse.FromString,
                _registered_method=True)
        self.Github = channel.unary_unary(
                '/web_api.AuthenticationService/Github',
                request_serializer=web__api__pb2.SocialAuthenticationRequest.SerializeToString,
                response_deserializer=web__api__pb2.AuthenticateResponse.FromString,
                _registered_method=True)


class AuthenticationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Authenticate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Authorize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScopeAuthorize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyToken(self, request, context):
        """
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForgotPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Linkedin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Google(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Github(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthenticationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=web__api__pb2.AuthenticateRequest.FromString,
                    response_serializer=web__api__pb2.AuthenticateResponse.SerializeToString,
            ),
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=web__api__pb2.RegisterUserRequest.FromString,
                    response_serializer=web__api__pb2.AuthenticateResponse.SerializeToString,
            ),
            'Authorize': grpc.unary_unary_rpc_method_handler(
                    servicer.Authorize,
                    request_deserializer=web__api__pb2.AuthorizeRequest.FromString,
                    response_serializer=web__api__pb2.AuthenticateResponse.SerializeToString,
            ),
            'ScopeAuthorize': grpc.unary_unary_rpc_method_handler(
                    servicer.ScopeAuthorize,
                    request_deserializer=web__api__pb2.ScopeAuthorizeRequest.FromString,
                    response_serializer=web__api__pb2.ScopedAuthenticationResponse.SerializeToString,
            ),
            'VerifyToken': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyToken,
                    request_deserializer=web__api__pb2.VerifyTokenRequest.FromString,
                    response_serializer=web__api__pb2.VerifyTokenResponse.SerializeToString,
            ),
            'ForgotPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ForgotPassword,
                    request_deserializer=web__api__pb2.ForgotPasswordRequest.FromString,
                    response_serializer=web__api__pb2.ForgotPasswordResponse.SerializeToString,
            ),
            'CreatePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePassword,
                    request_deserializer=web__api__pb2.CreatePasswordRequest.FromString,
                    response_serializer=web__api__pb2.CreatePasswordResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=web__api__pb2.GetUserRequest.FromString,
                    response_serializer=web__api__pb2.GetUserResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=web__api__pb2.UpdateUserRequest.FromString,
                    response_serializer=web__api__pb2.UpdateUserResponse.SerializeToString,
            ),
            'GetAllUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllUser,
                    request_deserializer=web__api__pb2.GetAllUserRequest.FromString,
                    response_serializer=web__api__pb2.GetAllUserResponse.SerializeToString,
            ),
            'Linkedin': grpc.unary_unary_rpc_method_handler(
                    servicer.Linkedin,
                    request_deserializer=web__api__pb2.SocialAuthenticationRequest.FromString,
                    response_serializer=web__api__pb2.AuthenticateResponse.SerializeToString,
            ),
            'Google': grpc.unary_unary_rpc_method_handler(
                    servicer.Google,
                    request_deserializer=web__api__pb2.SocialAuthenticationRequest.FromString,
                    response_serializer=web__api__pb2.AuthenticateResponse.SerializeToString,
            ),
            'Github': grpc.unary_unary_rpc_method_handler(
                    servicer.Github,
                    request_deserializer=web__api__pb2.SocialAuthenticationRequest.FromString,
                    response_serializer=web__api__pb2.AuthenticateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'web_api.AuthenticationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('web_api.AuthenticationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthenticationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/Authenticate',
            web__api__pb2.AuthenticateRequest.SerializeToString,
            web__api__pb2.AuthenticateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/RegisterUser',
            web__api__pb2.RegisterUserRequest.SerializeToString,
            web__api__pb2.AuthenticateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Authorize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/Authorize',
            web__api__pb2.AuthorizeRequest.SerializeToString,
            web__api__pb2.AuthenticateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScopeAuthorize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/ScopeAuthorize',
            web__api__pb2.ScopeAuthorizeRequest.SerializeToString,
            web__api__pb2.ScopedAuthenticationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/VerifyToken',
            web__api__pb2.VerifyTokenRequest.SerializeToString,
            web__api__pb2.VerifyTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ForgotPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/ForgotPassword',
            web__api__pb2.ForgotPasswordRequest.SerializeToString,
            web__api__pb2.ForgotPasswordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/CreatePassword',
            web__api__pb2.CreatePasswordRequest.SerializeToString,
            web__api__pb2.CreatePasswordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/GetUser',
            web__api__pb2.GetUserRequest.SerializeToString,
            web__api__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/UpdateUser',
            web__api__pb2.UpdateUserRequest.SerializeToString,
            web__api__pb2.UpdateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/GetAllUser',
            web__api__pb2.GetAllUserRequest.SerializeToString,
            web__api__pb2.GetAllUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Linkedin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/Linkedin',
            web__api__pb2.SocialAuthenticationRequest.SerializeToString,
            web__api__pb2.AuthenticateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Google(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/Google',
            web__api__pb2.SocialAuthenticationRequest.SerializeToString,
            web__api__pb2.AuthenticateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Github(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.AuthenticationService/Github',
            web__api__pb2.SocialAuthenticationRequest.SerializeToString,
            web__api__pb2.AuthenticateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OrganizationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOrganization = channel.unary_unary(
                '/web_api.OrganizationService/CreateOrganization',
                request_serializer=web__api__pb2.CreateOrganizationRequest.SerializeToString,
                response_deserializer=web__api__pb2.CreateOrganizationResponse.FromString,
                _registered_method=True)
        self.GetOrganization = channel.unary_unary(
                '/web_api.OrganizationService/GetOrganization',
                request_serializer=web__api__pb2.GetOrganizationRequest.SerializeToString,
                response_deserializer=web__api__pb2.GetOrganizationResponse.FromString,
                _registered_method=True)
        self.UpdateOrganization = channel.unary_unary(
                '/web_api.OrganizationService/UpdateOrganization',
                request_serializer=web__api__pb2.UpdateOrganizationRequest.SerializeToString,
                response_deserializer=web__api__pb2.UpdateOrganizationResponse.FromString,
                _registered_method=True)
        self.UpdateBillingInformation = channel.unary_unary(
                '/web_api.OrganizationService/UpdateBillingInformation',
                request_serializer=web__api__pb2.UpdateBillingInformationRequest.SerializeToString,
                response_deserializer=common__pb2.BaseResponse.FromString,
                _registered_method=True)


class OrganizationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateOrganization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrganization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOrganization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBillingInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrganizationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateOrganization': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrganization,
                    request_deserializer=web__api__pb2.CreateOrganizationRequest.FromString,
                    response_serializer=web__api__pb2.CreateOrganizationResponse.SerializeToString,
            ),
            'GetOrganization': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrganization,
                    request_deserializer=web__api__pb2.GetOrganizationRequest.FromString,
                    response_serializer=web__api__pb2.GetOrganizationResponse.SerializeToString,
            ),
            'UpdateOrganization': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOrganization,
                    request_deserializer=web__api__pb2.UpdateOrganizationRequest.FromString,
                    response_serializer=web__api__pb2.UpdateOrganizationResponse.SerializeToString,
            ),
            'UpdateBillingInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBillingInformation,
                    request_deserializer=web__api__pb2.UpdateBillingInformationRequest.FromString,
                    response_serializer=common__pb2.BaseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'web_api.OrganizationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('web_api.OrganizationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrganizationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateOrganization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.OrganizationService/CreateOrganization',
            web__api__pb2.CreateOrganizationRequest.SerializeToString,
            web__api__pb2.CreateOrganizationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrganization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.OrganizationService/GetOrganization',
            web__api__pb2.GetOrganizationRequest.SerializeToString,
            web__api__pb2.GetOrganizationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateOrganization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.OrganizationService/UpdateOrganization',
            web__api__pb2.UpdateOrganizationRequest.SerializeToString,
            web__api__pb2.UpdateOrganizationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateBillingInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.OrganizationService/UpdateBillingInformation',
            web__api__pb2.UpdateBillingInformationRequest.SerializeToString,
            common__pb2.BaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ProjectServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateProject = channel.unary_unary(
                '/web_api.ProjectService/CreateProject',
                request_serializer=web__api__pb2.CreateProjectRequest.SerializeToString,
                response_deserializer=web__api__pb2.CreateProjectResponse.FromString,
                _registered_method=True)
        self.UpdateProject = channel.unary_unary(
                '/web_api.ProjectService/UpdateProject',
                request_serializer=web__api__pb2.UpdateProjectRequest.SerializeToString,
                response_deserializer=web__api__pb2.UpdateProjectResponse.FromString,
                _registered_method=True)
        self.GetProject = channel.unary_unary(
                '/web_api.ProjectService/GetProject',
                request_serializer=web__api__pb2.GetProjectRequest.SerializeToString,
                response_deserializer=web__api__pb2.GetProjectResponse.FromString,
                _registered_method=True)
        self.GetAllProject = channel.unary_unary(
                '/web_api.ProjectService/GetAllProject',
                request_serializer=web__api__pb2.GetAllProjectRequest.SerializeToString,
                response_deserializer=web__api__pb2.GetAllProjectResponse.FromString,
                _registered_method=True)
        self.AddUsersToProject = channel.unary_unary(
                '/web_api.ProjectService/AddUsersToProject',
                request_serializer=web__api__pb2.AddUsersToProjectRequest.SerializeToString,
                response_deserializer=web__api__pb2.AddUsersToProjectResponse.FromString,
                _registered_method=True)
        self.ArchiveProject = channel.unary_unary(
                '/web_api.ProjectService/ArchiveProject',
                request_serializer=web__api__pb2.ArchiveProjectRequest.SerializeToString,
                response_deserializer=web__api__pb2.ArchiveProjectResponse.FromString,
                _registered_method=True)
        self.CreateProjectCredential = channel.unary_unary(
                '/web_api.ProjectService/CreateProjectCredential',
                request_serializer=web__api__pb2.CreateProjectCredentialRequest.SerializeToString,
                response_deserializer=web__api__pb2.CreateProjectCredentialResponse.FromString,
                _registered_method=True)
        self.GetAllProjectCredential = channel.unary_unary(
                '/web_api.ProjectService/GetAllProjectCredential',
                request_serializer=web__api__pb2.GetAllProjectCredentialRequest.SerializeToString,
                response_deserializer=web__api__pb2.GetAllProjectCredentialResponse.FromString,
                _registered_method=True)


class ProjectServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUsersToProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ArchiveProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProjectCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllProjectCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProjectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateProject': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProject,
                    request_deserializer=web__api__pb2.CreateProjectRequest.FromString,
                    response_serializer=web__api__pb2.CreateProjectResponse.SerializeToString,
            ),
            'UpdateProject': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProject,
                    request_deserializer=web__api__pb2.UpdateProjectRequest.FromString,
                    response_serializer=web__api__pb2.UpdateProjectResponse.SerializeToString,
            ),
            'GetProject': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProject,
                    request_deserializer=web__api__pb2.GetProjectRequest.FromString,
                    response_serializer=web__api__pb2.GetProjectResponse.SerializeToString,
            ),
            'GetAllProject': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllProject,
                    request_deserializer=web__api__pb2.GetAllProjectRequest.FromString,
                    response_serializer=web__api__pb2.GetAllProjectResponse.SerializeToString,
            ),
            'AddUsersToProject': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUsersToProject,
                    request_deserializer=web__api__pb2.AddUsersToProjectRequest.FromString,
                    response_serializer=web__api__pb2.AddUsersToProjectResponse.SerializeToString,
            ),
            'ArchiveProject': grpc.unary_unary_rpc_method_handler(
                    servicer.ArchiveProject,
                    request_deserializer=web__api__pb2.ArchiveProjectRequest.FromString,
                    response_serializer=web__api__pb2.ArchiveProjectResponse.SerializeToString,
            ),
            'CreateProjectCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProjectCredential,
                    request_deserializer=web__api__pb2.CreateProjectCredentialRequest.FromString,
                    response_serializer=web__api__pb2.CreateProjectCredentialResponse.SerializeToString,
            ),
            'GetAllProjectCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllProjectCredential,
                    request_deserializer=web__api__pb2.GetAllProjectCredentialRequest.FromString,
                    response_serializer=web__api__pb2.GetAllProjectCredentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'web_api.ProjectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('web_api.ProjectService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProjectService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.ProjectService/CreateProject',
            web__api__pb2.CreateProjectRequest.SerializeToString,
            web__api__pb2.CreateProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.ProjectService/UpdateProject',
            web__api__pb2.UpdateProjectRequest.SerializeToString,
            web__api__pb2.UpdateProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.ProjectService/GetProject',
            web__api__pb2.GetProjectRequest.SerializeToString,
            web__api__pb2.GetProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.ProjectService/GetAllProject',
            web__api__pb2.GetAllProjectRequest.SerializeToString,
            web__api__pb2.GetAllProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddUsersToProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.ProjectService/AddUsersToProject',
            web__api__pb2.AddUsersToProjectRequest.SerializeToString,
            web__api__pb2.AddUsersToProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ArchiveProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.ProjectService/ArchiveProject',
            web__api__pb2.ArchiveProjectRequest.SerializeToString,
            web__api__pb2.ArchiveProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateProjectCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.ProjectService/CreateProjectCredential',
            web__api__pb2.CreateProjectCredentialRequest.SerializeToString,
            web__api__pb2.CreateProjectCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllProjectCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/web_api.ProjectService/GetAllProjectCredential',
            web__api__pb2.GetAllProjectCredentialRequest.SerializeToString,
            web__api__pb2.GetAllProjectCredentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
