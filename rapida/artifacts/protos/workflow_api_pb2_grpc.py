# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import workflow_api_pb2 as workflow__api__pb2

GRPC_GENERATED_VERSION = '1.65.4'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in workflow_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class WorkflowServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetWorkflow = channel.unary_unary(
                '/workflow_api.WorkflowService/GetWorkflow',
                request_serializer=workflow__api__pb2.GetWorkflowRequest.SerializeToString,
                response_deserializer=workflow__api__pb2.GetWorkflowResponse.FromString,
                _registered_method=True)
        self.GetAllWorkflow = channel.unary_unary(
                '/workflow_api.WorkflowService/GetAllWorkflow',
                request_serializer=workflow__api__pb2.GetAllWorkflowRequest.SerializeToString,
                response_deserializer=workflow__api__pb2.GetAllWorkflowResponse.FromString,
                _registered_method=True)
        self.CreateWorkflow = channel.unary_unary(
                '/workflow_api.WorkflowService/CreateWorkflow',
                request_serializer=workflow__api__pb2.CreateWorkflowRequest.SerializeToString,
                response_deserializer=workflow__api__pb2.GetWorkflowResponse.FromString,
                _registered_method=True)
        self.CreateWorkflowTag = channel.unary_unary(
                '/workflow_api.WorkflowService/CreateWorkflowTag',
                request_serializer=workflow__api__pb2.CreateWorkflowTagRequest.SerializeToString,
                response_deserializer=workflow__api__pb2.GetWorkflowResponse.FromString,
                _registered_method=True)
        self.PublishWorkflowVersion = channel.unary_unary(
                '/workflow_api.WorkflowService/PublishWorkflowVersion',
                request_serializer=workflow__api__pb2.PublishWorkflowVersionRequest.SerializeToString,
                response_deserializer=workflow__api__pb2.GetWorkflowResponse.FromString,
                _registered_method=True)
        self.UpdateWorkflowDetail = channel.unary_unary(
                '/workflow_api.WorkflowService/UpdateWorkflowDetail',
                request_serializer=workflow__api__pb2.UpdateWorkflowDetailRequest.SerializeToString,
                response_deserializer=workflow__api__pb2.GetWorkflowResponse.FromString,
                _registered_method=True)


class WorkflowServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorkflowTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishWorkflowVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorkflowDetail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkflowServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflow,
                    request_deserializer=workflow__api__pb2.GetWorkflowRequest.FromString,
                    response_serializer=workflow__api__pb2.GetWorkflowResponse.SerializeToString,
            ),
            'GetAllWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllWorkflow,
                    request_deserializer=workflow__api__pb2.GetAllWorkflowRequest.FromString,
                    response_serializer=workflow__api__pb2.GetAllWorkflowResponse.SerializeToString,
            ),
            'CreateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkflow,
                    request_deserializer=workflow__api__pb2.CreateWorkflowRequest.FromString,
                    response_serializer=workflow__api__pb2.GetWorkflowResponse.SerializeToString,
            ),
            'CreateWorkflowTag': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkflowTag,
                    request_deserializer=workflow__api__pb2.CreateWorkflowTagRequest.FromString,
                    response_serializer=workflow__api__pb2.GetWorkflowResponse.SerializeToString,
            ),
            'PublishWorkflowVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishWorkflowVersion,
                    request_deserializer=workflow__api__pb2.PublishWorkflowVersionRequest.FromString,
                    response_serializer=workflow__api__pb2.GetWorkflowResponse.SerializeToString,
            ),
            'UpdateWorkflowDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorkflowDetail,
                    request_deserializer=workflow__api__pb2.UpdateWorkflowDetailRequest.FromString,
                    response_serializer=workflow__api__pb2.GetWorkflowResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'workflow_api.WorkflowService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('workflow_api.WorkflowService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WorkflowService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflow_api.WorkflowService/GetWorkflow',
            workflow__api__pb2.GetWorkflowRequest.SerializeToString,
            workflow__api__pb2.GetWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflow_api.WorkflowService/GetAllWorkflow',
            workflow__api__pb2.GetAllWorkflowRequest.SerializeToString,
            workflow__api__pb2.GetAllWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflow_api.WorkflowService/CreateWorkflow',
            workflow__api__pb2.CreateWorkflowRequest.SerializeToString,
            workflow__api__pb2.GetWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateWorkflowTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflow_api.WorkflowService/CreateWorkflowTag',
            workflow__api__pb2.CreateWorkflowTagRequest.SerializeToString,
            workflow__api__pb2.GetWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishWorkflowVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflow_api.WorkflowService/PublishWorkflowVersion',
            workflow__api__pb2.PublishWorkflowVersionRequest.SerializeToString,
            workflow__api__pb2.GetWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateWorkflowDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflow_api.WorkflowService/UpdateWorkflowDetail',
            workflow__api__pb2.UpdateWorkflowDetailRequest.SerializeToString,
            workflow__api__pb2.GetWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ExecutorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunWorkflow = channel.unary_unary(
                '/workflow_api.ExecutorService/RunWorkflow',
                request_serializer=workflow__api__pb2.RunWorkflowRequest.SerializeToString,
                response_deserializer=workflow__api__pb2.RunWorkflowResponse.FromString,
                _registered_method=True)
        self.GetWorkflowRunOutput = channel.unary_unary(
                '/workflow_api.ExecutorService/GetWorkflowRunOutput',
                request_serializer=workflow__api__pb2.GetWorkflowRunOutputRequest.SerializeToString,
                response_deserializer=workflow__api__pb2.GetWorkflowRunOutputResponse.FromString,
                _registered_method=True)


class ExecutorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RunWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowRunOutput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecutorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.RunWorkflow,
                    request_deserializer=workflow__api__pb2.RunWorkflowRequest.FromString,
                    response_serializer=workflow__api__pb2.RunWorkflowResponse.SerializeToString,
            ),
            'GetWorkflowRunOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflowRunOutput,
                    request_deserializer=workflow__api__pb2.GetWorkflowRunOutputRequest.FromString,
                    response_serializer=workflow__api__pb2.GetWorkflowRunOutputResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'workflow_api.ExecutorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('workflow_api.ExecutorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ExecutorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RunWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflow_api.ExecutorService/RunWorkflow',
            workflow__api__pb2.RunWorkflowRequest.SerializeToString,
            workflow__api__pb2.RunWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWorkflowRunOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflow_api.ExecutorService/GetWorkflowRunOutput',
            workflow__api__pb2.GetWorkflowRunOutputRequest.SerializeToString,
            workflow__api__pb2.GetWorkflowRunOutputResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
