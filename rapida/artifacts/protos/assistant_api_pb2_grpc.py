# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import assistant_api_pb2 as assistant__api__pb2
import rapida.artifacts.protos.common_pb2 as common__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in assistant_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AssistantServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAssistant = channel.unary_unary(
                '/assistant_api.AssistantService/GetAssistant',
                request_serializer=assistant__api__pb2.GetAssistantRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.GetAssistantResponse.FromString,
                _registered_method=True)
        self.GetAllAssistant = channel.unary_unary(
                '/assistant_api.AssistantService/GetAllAssistant',
                request_serializer=assistant__api__pb2.GetAllAssistantRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.GetAllAssistantResponse.FromString,
                _registered_method=True)
        self.GetAllAssistantProviderModel = channel.unary_unary(
                '/assistant_api.AssistantService/GetAllAssistantProviderModel',
                request_serializer=assistant__api__pb2.GetAllAssistantProviderModelRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.GetAllAssistantProviderModelResponse.FromString,
                _registered_method=True)
        self.CreateAssistant = channel.unary_unary(
                '/assistant_api.AssistantService/CreateAssistant',
                request_serializer=assistant__api__pb2.CreateAssistantRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.CreateAssistantResponse.FromString,
                _registered_method=True)
        self.CreateAssistantProviderModel = channel.unary_unary(
                '/assistant_api.AssistantService/CreateAssistantProviderModel',
                request_serializer=assistant__api__pb2.CreateAssistantProviderModelRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.CreateAssistantProviderModelResponse.FromString,
                _registered_method=True)
        self.CreateAssistantKnowledgeConfiguration = channel.unary_unary(
                '/assistant_api.AssistantService/CreateAssistantKnowledgeConfiguration',
                request_serializer=assistant__api__pb2.CreateAssistantKnowledgeConfigurationRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.GetAssistantResponse.FromString,
                _registered_method=True)
        self.CreateAssistantTag = channel.unary_unary(
                '/assistant_api.AssistantService/CreateAssistantTag',
                request_serializer=assistant__api__pb2.CreateAssistantTagRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.GetAssistantResponse.FromString,
                _registered_method=True)
        self.UpdateAssistantVersion = channel.unary_unary(
                '/assistant_api.AssistantService/UpdateAssistantVersion',
                request_serializer=assistant__api__pb2.UpdateAssistantVersionRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.UpdateAssistantVersionResponse.FromString,
                _registered_method=True)
        self.UpdateAssistantDetail = channel.unary_unary(
                '/assistant_api.AssistantService/UpdateAssistantDetail',
                request_serializer=assistant__api__pb2.UpdateAssistantDetailRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.GetAssistantResponse.FromString,
                _registered_method=True)
        self.GetAllAssistantMessage = channel.unary_unary(
                '/assistant_api.AssistantService/GetAllAssistantMessage',
                request_serializer=assistant__api__pb2.GetAllAssistantMessageRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.GetAllAssistantMessageResponse.FromString,
                _registered_method=True)
        self.GetAllAssistantConversation = channel.unary_unary(
                '/assistant_api.AssistantService/GetAllAssistantConversation',
                request_serializer=common__pb2.GetAllAssistantConversationRequest.SerializeToString,
                response_deserializer=common__pb2.GetAllAssistantConversationResponse.FromString,
                _registered_method=True)
        self.GetAllConversationMessage = channel.unary_unary(
                '/assistant_api.AssistantService/GetAllConversationMessage',
                request_serializer=common__pb2.GetAllConversationMessageRequest.SerializeToString,
                response_deserializer=common__pb2.GetAllConversationMessageResponse.FromString,
                _registered_method=True)
        self.CreateAssistantToolConfiguration = channel.unary_unary(
                '/assistant_api.AssistantService/CreateAssistantToolConfiguration',
                request_serializer=assistant__api__pb2.CreateAssistantToolConfigurationRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.GetAssistantResponse.FromString,
                _registered_method=True)
        self.GetAllAssistantTool = channel.unary_unary(
                '/assistant_api.AssistantService/GetAllAssistantTool',
                request_serializer=assistant__api__pb2.GetAllAssistantToolRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.GetAllAssistantToolResponse.FromString,
                _registered_method=True)


class AssistantServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAssistant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllAssistant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllAssistantProviderModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAssistant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAssistantProviderModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAssistantKnowledgeConfiguration(self, request, context):
        """next gen
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAssistantTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAssistantVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAssistantDetail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllAssistantMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllAssistantConversation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllConversationMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAssistantToolConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllAssistantTool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AssistantServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAssistant': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssistant,
                    request_deserializer=assistant__api__pb2.GetAssistantRequest.FromString,
                    response_serializer=assistant__api__pb2.GetAssistantResponse.SerializeToString,
            ),
            'GetAllAssistant': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllAssistant,
                    request_deserializer=assistant__api__pb2.GetAllAssistantRequest.FromString,
                    response_serializer=assistant__api__pb2.GetAllAssistantResponse.SerializeToString,
            ),
            'GetAllAssistantProviderModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllAssistantProviderModel,
                    request_deserializer=assistant__api__pb2.GetAllAssistantProviderModelRequest.FromString,
                    response_serializer=assistant__api__pb2.GetAllAssistantProviderModelResponse.SerializeToString,
            ),
            'CreateAssistant': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAssistant,
                    request_deserializer=assistant__api__pb2.CreateAssistantRequest.FromString,
                    response_serializer=assistant__api__pb2.CreateAssistantResponse.SerializeToString,
            ),
            'CreateAssistantProviderModel': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAssistantProviderModel,
                    request_deserializer=assistant__api__pb2.CreateAssistantProviderModelRequest.FromString,
                    response_serializer=assistant__api__pb2.CreateAssistantProviderModelResponse.SerializeToString,
            ),
            'CreateAssistantKnowledgeConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAssistantKnowledgeConfiguration,
                    request_deserializer=assistant__api__pb2.CreateAssistantKnowledgeConfigurationRequest.FromString,
                    response_serializer=assistant__api__pb2.GetAssistantResponse.SerializeToString,
            ),
            'CreateAssistantTag': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAssistantTag,
                    request_deserializer=assistant__api__pb2.CreateAssistantTagRequest.FromString,
                    response_serializer=assistant__api__pb2.GetAssistantResponse.SerializeToString,
            ),
            'UpdateAssistantVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAssistantVersion,
                    request_deserializer=assistant__api__pb2.UpdateAssistantVersionRequest.FromString,
                    response_serializer=assistant__api__pb2.UpdateAssistantVersionResponse.SerializeToString,
            ),
            'UpdateAssistantDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAssistantDetail,
                    request_deserializer=assistant__api__pb2.UpdateAssistantDetailRequest.FromString,
                    response_serializer=assistant__api__pb2.GetAssistantResponse.SerializeToString,
            ),
            'GetAllAssistantMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllAssistantMessage,
                    request_deserializer=assistant__api__pb2.GetAllAssistantMessageRequest.FromString,
                    response_serializer=assistant__api__pb2.GetAllAssistantMessageResponse.SerializeToString,
            ),
            'GetAllAssistantConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllAssistantConversation,
                    request_deserializer=common__pb2.GetAllAssistantConversationRequest.FromString,
                    response_serializer=common__pb2.GetAllAssistantConversationResponse.SerializeToString,
            ),
            'GetAllConversationMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllConversationMessage,
                    request_deserializer=common__pb2.GetAllConversationMessageRequest.FromString,
                    response_serializer=common__pb2.GetAllConversationMessageResponse.SerializeToString,
            ),
            'CreateAssistantToolConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAssistantToolConfiguration,
                    request_deserializer=assistant__api__pb2.CreateAssistantToolConfigurationRequest.FromString,
                    response_serializer=assistant__api__pb2.GetAssistantResponse.SerializeToString,
            ),
            'GetAllAssistantTool': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllAssistantTool,
                    request_deserializer=assistant__api__pb2.GetAllAssistantToolRequest.FromString,
                    response_serializer=assistant__api__pb2.GetAllAssistantToolResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'assistant_api.AssistantService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('assistant_api.AssistantService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AssistantService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAssistant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/GetAssistant',
            assistant__api__pb2.GetAssistantRequest.SerializeToString,
            assistant__api__pb2.GetAssistantResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllAssistant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/GetAllAssistant',
            assistant__api__pb2.GetAllAssistantRequest.SerializeToString,
            assistant__api__pb2.GetAllAssistantResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllAssistantProviderModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/GetAllAssistantProviderModel',
            assistant__api__pb2.GetAllAssistantProviderModelRequest.SerializeToString,
            assistant__api__pb2.GetAllAssistantProviderModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAssistant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/CreateAssistant',
            assistant__api__pb2.CreateAssistantRequest.SerializeToString,
            assistant__api__pb2.CreateAssistantResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAssistantProviderModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/CreateAssistantProviderModel',
            assistant__api__pb2.CreateAssistantProviderModelRequest.SerializeToString,
            assistant__api__pb2.CreateAssistantProviderModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAssistantKnowledgeConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/CreateAssistantKnowledgeConfiguration',
            assistant__api__pb2.CreateAssistantKnowledgeConfigurationRequest.SerializeToString,
            assistant__api__pb2.GetAssistantResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAssistantTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/CreateAssistantTag',
            assistant__api__pb2.CreateAssistantTagRequest.SerializeToString,
            assistant__api__pb2.GetAssistantResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAssistantVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/UpdateAssistantVersion',
            assistant__api__pb2.UpdateAssistantVersionRequest.SerializeToString,
            assistant__api__pb2.UpdateAssistantVersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAssistantDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/UpdateAssistantDetail',
            assistant__api__pb2.UpdateAssistantDetailRequest.SerializeToString,
            assistant__api__pb2.GetAssistantResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllAssistantMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/GetAllAssistantMessage',
            assistant__api__pb2.GetAllAssistantMessageRequest.SerializeToString,
            assistant__api__pb2.GetAllAssistantMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllAssistantConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/GetAllAssistantConversation',
            common__pb2.GetAllAssistantConversationRequest.SerializeToString,
            common__pb2.GetAllAssistantConversationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllConversationMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/GetAllConversationMessage',
            common__pb2.GetAllConversationMessageRequest.SerializeToString,
            common__pb2.GetAllConversationMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAssistantToolConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/CreateAssistantToolConfiguration',
            assistant__api__pb2.CreateAssistantToolConfigurationRequest.SerializeToString,
            assistant__api__pb2.GetAssistantResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllAssistantTool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.AssistantService/GetAllAssistantTool',
            assistant__api__pb2.GetAllAssistantToolRequest.SerializeToString,
            assistant__api__pb2.GetAllAssistantToolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ToolServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllTool = channel.unary_unary(
                '/assistant_api.ToolService/GetAllTool',
                request_serializer=assistant__api__pb2.GetAllToolRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.GetAllToolResponse.FromString,
                _registered_method=True)
        self.GetTool = channel.unary_unary(
                '/assistant_api.ToolService/GetTool',
                request_serializer=assistant__api__pb2.GetToolRequest.SerializeToString,
                response_deserializer=assistant__api__pb2.GetToolResponse.FromString,
                _registered_method=True)


class ToolServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAllTool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ToolServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllTool': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllTool,
                    request_deserializer=assistant__api__pb2.GetAllToolRequest.FromString,
                    response_serializer=assistant__api__pb2.GetAllToolResponse.SerializeToString,
            ),
            'GetTool': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTool,
                    request_deserializer=assistant__api__pb2.GetToolRequest.FromString,
                    response_serializer=assistant__api__pb2.GetToolResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'assistant_api.ToolService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('assistant_api.ToolService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ToolService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAllTool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.ToolService/GetAllTool',
            assistant__api__pb2.GetAllToolRequest.SerializeToString,
            assistant__api__pb2.GetAllToolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/assistant_api.ToolService/GetTool',
            assistant__api__pb2.GetToolRequest.SerializeToString,
            assistant__api__pb2.GetToolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
